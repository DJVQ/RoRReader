package com.example.myreadproject8.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.myreadproject8.greendao.entity.Recite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECITE".
*/
public class ReciteDao extends AbstractDao<Recite, Long> {

    public static final String TABLENAME = "RECITE";

    /**
     * Properties of entity Recite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ReciteT = new Property(1, String.class, "reciteT", false, "RECITE_T");
        public final static Property ReciteContent = new Property(2, String.class, "reciteContent", false, "RECITE_CONTENT");
        public final static Property Author = new Property(3, String.class, "Author", false, "AUTHOR");
        public final static Property BookName = new Property(4, String.class, "bookName", false, "BOOK_NAME");
        public final static Property AddDate = new Property(5, long.class, "addDate", false, "ADD_DATE");
        public final static Property ReciteNum = new Property(6, int.class, "reciteNum", false, "RECITE_NUM");
        public final static Property FirstRecite = new Property(7, boolean.class, "firstRecite", false, "FIRST_RECITE");
        public final static Property SecondRecite = new Property(8, boolean.class, "secondRecite", false, "SECOND_RECITE");
        public final static Property ThirdRecite = new Property(9, boolean.class, "thirdRecite", false, "THIRD_RECITE");
        public final static Property FourthRecite = new Property(10, boolean.class, "fourthRecite", false, "FOURTH_RECITE");
        public final static Property FifthRecite = new Property(11, boolean.class, "fifthRecite", false, "FIFTH_RECITE");
        public final static Property SixthRecite = new Property(12, boolean.class, "sixthRecite", false, "SIXTH_RECITE");
        public final static Property SeventhRecite = new Property(13, boolean.class, "seventhRecite", false, "SEVENTH_RECITE");
        public final static Property SortCode = new Property(14, long.class, "sortCode", false, "SORT_CODE");
        public final static Property ReciteNums = new Property(15, int.class, "reciteNums", false, "RECITE_NUMS");
        public final static Property ReciteIndex = new Property(16, int.class, "reciteIndex", false, "RECITE_INDEX");
    }


    public ReciteDao(DaoConfig config) {
        super(config);
    }
    
    public ReciteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECITE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"RECITE_T\" TEXT," + // 1: reciteT
                "\"RECITE_CONTENT\" TEXT," + // 2: reciteContent
                "\"AUTHOR\" TEXT," + // 3: Author
                "\"BOOK_NAME\" TEXT," + // 4: bookName
                "\"ADD_DATE\" INTEGER NOT NULL ," + // 5: addDate
                "\"RECITE_NUM\" INTEGER NOT NULL ," + // 6: reciteNum
                "\"FIRST_RECITE\" INTEGER NOT NULL ," + // 7: firstRecite
                "\"SECOND_RECITE\" INTEGER NOT NULL ," + // 8: secondRecite
                "\"THIRD_RECITE\" INTEGER NOT NULL ," + // 9: thirdRecite
                "\"FOURTH_RECITE\" INTEGER NOT NULL ," + // 10: fourthRecite
                "\"FIFTH_RECITE\" INTEGER NOT NULL ," + // 11: fifthRecite
                "\"SIXTH_RECITE\" INTEGER NOT NULL ," + // 12: sixthRecite
                "\"SEVENTH_RECITE\" INTEGER NOT NULL ," + // 13: seventhRecite
                "\"SORT_CODE\" INTEGER NOT NULL ," + // 14: sortCode
                "\"RECITE_NUMS\" INTEGER NOT NULL ," + // 15: reciteNums
                "\"RECITE_INDEX\" INTEGER NOT NULL );"); // 16: reciteIndex
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Recite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String reciteT = entity.getReciteT();
        if (reciteT != null) {
            stmt.bindString(2, reciteT);
        }
 
        String reciteContent = entity.getReciteContent();
        if (reciteContent != null) {
            stmt.bindString(3, reciteContent);
        }
 
        String Author = entity.getAuthor();
        if (Author != null) {
            stmt.bindString(4, Author);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(5, bookName);
        }
        stmt.bindLong(6, entity.getAddDate());
        stmt.bindLong(7, entity.getReciteNum());
        stmt.bindLong(8, entity.getFirstRecite() ? 1L: 0L);
        stmt.bindLong(9, entity.getSecondRecite() ? 1L: 0L);
        stmt.bindLong(10, entity.getThirdRecite() ? 1L: 0L);
        stmt.bindLong(11, entity.getFourthRecite() ? 1L: 0L);
        stmt.bindLong(12, entity.getFifthRecite() ? 1L: 0L);
        stmt.bindLong(13, entity.getSixthRecite() ? 1L: 0L);
        stmt.bindLong(14, entity.getSeventhRecite() ? 1L: 0L);
        stmt.bindLong(15, entity.getSortCode());
        stmt.bindLong(16, entity.getReciteNums());
        stmt.bindLong(17, entity.getReciteIndex());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Recite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String reciteT = entity.getReciteT();
        if (reciteT != null) {
            stmt.bindString(2, reciteT);
        }
 
        String reciteContent = entity.getReciteContent();
        if (reciteContent != null) {
            stmt.bindString(3, reciteContent);
        }
 
        String Author = entity.getAuthor();
        if (Author != null) {
            stmt.bindString(4, Author);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(5, bookName);
        }
        stmt.bindLong(6, entity.getAddDate());
        stmt.bindLong(7, entity.getReciteNum());
        stmt.bindLong(8, entity.getFirstRecite() ? 1L: 0L);
        stmt.bindLong(9, entity.getSecondRecite() ? 1L: 0L);
        stmt.bindLong(10, entity.getThirdRecite() ? 1L: 0L);
        stmt.bindLong(11, entity.getFourthRecite() ? 1L: 0L);
        stmt.bindLong(12, entity.getFifthRecite() ? 1L: 0L);
        stmt.bindLong(13, entity.getSixthRecite() ? 1L: 0L);
        stmt.bindLong(14, entity.getSeventhRecite() ? 1L: 0L);
        stmt.bindLong(15, entity.getSortCode());
        stmt.bindLong(16, entity.getReciteNums());
        stmt.bindLong(17, entity.getReciteIndex());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Recite readEntity(Cursor cursor, int offset) {
        Recite entity = new Recite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reciteT
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // reciteContent
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Author
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bookName
            cursor.getLong(offset + 5), // addDate
            cursor.getInt(offset + 6), // reciteNum
            cursor.getShort(offset + 7) != 0, // firstRecite
            cursor.getShort(offset + 8) != 0, // secondRecite
            cursor.getShort(offset + 9) != 0, // thirdRecite
            cursor.getShort(offset + 10) != 0, // fourthRecite
            cursor.getShort(offset + 11) != 0, // fifthRecite
            cursor.getShort(offset + 12) != 0, // sixthRecite
            cursor.getShort(offset + 13) != 0, // seventhRecite
            cursor.getLong(offset + 14), // sortCode
            cursor.getInt(offset + 15), // reciteNums
            cursor.getInt(offset + 16) // reciteIndex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Recite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setReciteT(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReciteContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBookName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddDate(cursor.getLong(offset + 5));
        entity.setReciteNum(cursor.getInt(offset + 6));
        entity.setFirstRecite(cursor.getShort(offset + 7) != 0);
        entity.setSecondRecite(cursor.getShort(offset + 8) != 0);
        entity.setThirdRecite(cursor.getShort(offset + 9) != 0);
        entity.setFourthRecite(cursor.getShort(offset + 10) != 0);
        entity.setFifthRecite(cursor.getShort(offset + 11) != 0);
        entity.setSixthRecite(cursor.getShort(offset + 12) != 0);
        entity.setSeventhRecite(cursor.getShort(offset + 13) != 0);
        entity.setSortCode(cursor.getLong(offset + 14));
        entity.setReciteNums(cursor.getInt(offset + 15));
        entity.setReciteIndex(cursor.getInt(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Recite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Recite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Recite entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
