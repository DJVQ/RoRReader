package com.example.myreadproject8.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.myreadproject8.greendao.entity.BookMarkE;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_MARK_E".
*/
public class BookMarkEDao extends AbstractDao<BookMarkE, String> {

    public static final String TABLENAME = "BOOK_MARK_E";

    /**
     * Properties of entity BookMarkE.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property MarkEBookId = new Property(1, String.class, "markEBookId", false, "MARK_EBOOK_ID");
        public final static Property MarkEContent = new Property(2, String.class, "markEContent", false, "MARK_ECONTENT");
        public final static Property MarkKind = new Property(3, String.class, "markKind", false, "MARK_KIND");
        public final static Property BookMarkEChapterNum = new Property(4, int.class, "bookMarkEChapterNum", false, "BOOK_MARK_ECHAPTER_NUM");
        public final static Property BookMarkEPagePosition = new Property(5, int.class, "bookMarkEPagePosition", false, "BOOK_MARK_EPAGE_POSITION");
        public final static Property ColorKind = new Property(6, String.class, "colorKind", false, "COLOR_KIND");
        public final static Property MarkFirstLinePosition = new Property(7, int.class, "markFirstLinePosition", false, "MARK_FIRST_LINE_POSITION");
        public final static Property MarkLastLinePosition = new Property(8, int.class, "markLastLinePosition", false, "MARK_LAST_LINE_POSITION");
        public final static Property MarkFirstCharPosition = new Property(9, int.class, "markFirstCharPosition", false, "MARK_FIRST_CHAR_POSITION");
        public final static Property MarkLastCharPosition = new Property(10, int.class, "markLastCharPosition", false, "MARK_LAST_CHAR_POSITION");
        public final static Property Number = new Property(11, int.class, "Number", false, "NUMBER");
    }


    public BookMarkEDao(DaoConfig config) {
        super(config);
    }
    
    public BookMarkEDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_MARK_E\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"MARK_EBOOK_ID\" TEXT NOT NULL ," + // 1: markEBookId
                "\"MARK_ECONTENT\" TEXT," + // 2: markEContent
                "\"MARK_KIND\" TEXT," + // 3: markKind
                "\"BOOK_MARK_ECHAPTER_NUM\" INTEGER NOT NULL ," + // 4: bookMarkEChapterNum
                "\"BOOK_MARK_EPAGE_POSITION\" INTEGER NOT NULL ," + // 5: bookMarkEPagePosition
                "\"COLOR_KIND\" TEXT," + // 6: colorKind
                "\"MARK_FIRST_LINE_POSITION\" INTEGER NOT NULL ," + // 7: markFirstLinePosition
                "\"MARK_LAST_LINE_POSITION\" INTEGER NOT NULL ," + // 8: markLastLinePosition
                "\"MARK_FIRST_CHAR_POSITION\" INTEGER NOT NULL ," + // 9: markFirstCharPosition
                "\"MARK_LAST_CHAR_POSITION\" INTEGER NOT NULL ," + // 10: markLastCharPosition
                "\"NUMBER\" INTEGER NOT NULL );"); // 11: Number
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_MARK_E\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookMarkE entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
        stmt.bindString(2, entity.getMarkEBookId());
 
        String markEContent = entity.getMarkEContent();
        if (markEContent != null) {
            stmt.bindString(3, markEContent);
        }
 
        String markKind = entity.getMarkKind();
        if (markKind != null) {
            stmt.bindString(4, markKind);
        }
        stmt.bindLong(5, entity.getBookMarkEChapterNum());
        stmt.bindLong(6, entity.getBookMarkEPagePosition());
 
        String colorKind = entity.getColorKind();
        if (colorKind != null) {
            stmt.bindString(7, colorKind);
        }
        stmt.bindLong(8, entity.getMarkFirstLinePosition());
        stmt.bindLong(9, entity.getMarkLastLinePosition());
        stmt.bindLong(10, entity.getMarkFirstCharPosition());
        stmt.bindLong(11, entity.getMarkLastCharPosition());
        stmt.bindLong(12, entity.getNumber());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookMarkE entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
        stmt.bindString(2, entity.getMarkEBookId());
 
        String markEContent = entity.getMarkEContent();
        if (markEContent != null) {
            stmt.bindString(3, markEContent);
        }
 
        String markKind = entity.getMarkKind();
        if (markKind != null) {
            stmt.bindString(4, markKind);
        }
        stmt.bindLong(5, entity.getBookMarkEChapterNum());
        stmt.bindLong(6, entity.getBookMarkEPagePosition());
 
        String colorKind = entity.getColorKind();
        if (colorKind != null) {
            stmt.bindString(7, colorKind);
        }
        stmt.bindLong(8, entity.getMarkFirstLinePosition());
        stmt.bindLong(9, entity.getMarkLastLinePosition());
        stmt.bindLong(10, entity.getMarkFirstCharPosition());
        stmt.bindLong(11, entity.getMarkLastCharPosition());
        stmt.bindLong(12, entity.getNumber());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BookMarkE readEntity(Cursor cursor, int offset) {
        BookMarkE entity = new BookMarkE( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.getString(offset + 1), // markEBookId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // markEContent
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // markKind
            cursor.getInt(offset + 4), // bookMarkEChapterNum
            cursor.getInt(offset + 5), // bookMarkEPagePosition
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // colorKind
            cursor.getInt(offset + 7), // markFirstLinePosition
            cursor.getInt(offset + 8), // markLastLinePosition
            cursor.getInt(offset + 9), // markFirstCharPosition
            cursor.getInt(offset + 10), // markLastCharPosition
            cursor.getInt(offset + 11) // Number
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookMarkE entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMarkEBookId(cursor.getString(offset + 1));
        entity.setMarkEContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMarkKind(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBookMarkEChapterNum(cursor.getInt(offset + 4));
        entity.setBookMarkEPagePosition(cursor.getInt(offset + 5));
        entity.setColorKind(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMarkFirstLinePosition(cursor.getInt(offset + 7));
        entity.setMarkLastLinePosition(cursor.getInt(offset + 8));
        entity.setMarkFirstCharPosition(cursor.getInt(offset + 9));
        entity.setMarkLastCharPosition(cursor.getInt(offset + 10));
        entity.setNumber(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BookMarkE entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(BookMarkE entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookMarkE entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
